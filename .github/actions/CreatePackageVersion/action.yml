name: Create Package Version Base

inputs:
  runApexTest:
    description: 'Run Apex Code Coverage'  
    required: true
    default: 'true'
  skipValidation:
    description: 'Skip Package Validation'     
    required: true
    default: 'false' 
  packageName:
    description: Package Name
    required: true
    default: 'core'
  waitTime:
    description: 'Wait time to create Package'     
    required: true
    default: 1000  
  clientid:
    description: 'clientid'     
    required: true  
  package_key:
    description: 'package_key'     
    required: true  
  private_key:
    description: 'private_key'     
    required: true   


createPackageVersion:
  steps:  
  - uses: actions/checkout@v2
    with:
      fetch-depth: 0
  - name: Create Package Version 
    env:
      RUN_APEX_TESTS: ${{ github.event.inputs.runApexTest }}
      SKIP_VALIDATION: ${{ github.event.inputs.skipValidation }}  
      PACKAGE_NAME: ${{ github.event.inputs.packageName }}  
      WAIT: ${{ github.event.inputs.waitTime }}  
      CLIENT_ID: ${{ github.event.inputs.clientid }}  
      PACKAGE_KEY: ${{ github.event.inputs.package_key }}  
      PRIVATE_KEY: ${{ github.event.inputs.private_key }}  
    run: |
      echo Hello World
      sfdx force
      echo ${PRIVATE_KEY} > server.key
      sfdx auth:jwt:grant --clientid ${CLIENT_ID} --jwtkeyfile server.key --username demo.org@communications-b2c.1677243042259 --instanceurl https://login.salesforce.com --setalias DEVHUB
      COMMAND="sfdx force:package:version:create -p ${PACKAGE_NAME} -d "force-app-${PACKAGE_NAME}" -k ${PACKAGE_KEY} --wait ${WAIT} -v DEVHUB"      
      if ${RUN_APEX_TESTS}; then
        echo "Adding Code Coverage" 
        COMMAND="${COMMAND} --codecoverage " 
      fi
      if ${SKIP_VALIDATION}; then
        echo "Adding Skip Validation" 
        COMMAND="${COMMAND} --skipvalidation " 
      fi
      # Run sfdx force:package:version:create 
      echo "COMMAND:${COMMAND}"
      ${COMMAND}
